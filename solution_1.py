# -*- coding: utf-8 -*-
"""Solution 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/iheb12/6fff97e2b10957bcc317316e09231cef/solution-1.ipynb

#The Sparks Foundation----Internship-----
---
**Iheb Derbali**
---
**Data science & Buisness Analytics  --Task1--**
"""

#Importing librairies
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

#Importing the Data
df=pd.read_csv("http://bit.ly/w-data")
print("data imported succefully")

"""#Data Analysis"""

#Shape of the data
df.shape

#Some info about the data
df.info()

#Printing some observations
df.head()

#List of columns
list(df.columns)

#Describing the data
df.describe()

#Counting the values
df.value_counts()

#Checking the missing values
df.isna().any()

"""**there is no missing values**"""

#Correlation between Hours and Scores
df.corr()

"""#Data Visulization

```
# Ce texte est au format code
```

**
"""

#Histogram
df.hist(bins=20,edgecolor='red',figsize=(8,5))
plt.show()

#Scatter plot
df.plot(x='Hours',y='Scores',kind='scatter')
plt.title('Hours vs Percentage')  
plt.show()

#Pie plot
plt.figure(figsize=(10,6))
df.dtypes.value_counts().plot.pie(autopct="%1.1f%%")
plt.title("Data type %")
plt.show()

sns.countplot(x='Scores',data=df)
plt.show()

sns.countplot(x='Hours',data=df)
plt.show()

#Heatmap correlation
sns.heatmap(df.corr(),annot=True,cmap="RdYlGn")
plt.show()

"""#Data Preparing"""

X = df.iloc[:, :-1].values  
y = df.iloc[:, 1].values

print(X)

X.shape

print(y)

y.shape

"""#Machine learning"""

#Importing librairies
from sklearn.model_selection import train_test_split  
X_train, X_test, y_train, y_test = train_test_split(X, y, 
                            test_size=0.3, random_state=0)

print(X_train.shape)
print(y_train.shape)

print(X_test.shape)
print(y_test.shape)

"""#Fitting the model"""

#Importing librairies
#Using linear regression algorithm
from sklearn.linear_model import LinearRegression  
lin_reg = LinearRegression()  
lin_reg.fit(X_train, y_train)

y_pred=lin_reg.predict(X_test)

print(y_pred)

"""**Plotting the predictions**

"""

plt.plot(y_pred)
plt.title("Predictions(y_pred)")
plt.show()

df1=pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})

df1

"""**Plotting the actual and the predicted**"""

plt.plot(df1)
plt.legend(["Actual","Predicted"])
plt.show()

hours=np.array(9.25).reshape(-1,1)

pred=lin_reg.predict(hours)
print("predicted score = {}".format(pred))

from sklearn import metrics
print(metrics.mean_absolute_error(y_test,y_pred))